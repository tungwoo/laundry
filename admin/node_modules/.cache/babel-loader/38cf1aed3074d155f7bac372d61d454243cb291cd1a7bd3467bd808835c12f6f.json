{"ast":null,"code":"import router from './router';\nimport store from './store';\nimport { Message } from 'ant-design-vue';\nimport NProgress from 'nprogress'; // 进度条\nimport 'nprogress/nprogress.css'; // 进度条样式\nimport { getToken } from '@/utils/auth'; // 获取token\n\nNProgress.configure({\n  showSpinner: false\n}); // NProgress配置\n\nconst whiteList = ['/login']; // 不重定向白名单\n\n// 全局前置守卫\nrouter.beforeEach(async (to, from, next) => {\n  // 开始进度条\n  NProgress.start();\n\n  // 设置页面标题\n  document.title = to.meta.title ? to.meta.title + ' - 洗衣店管理系统' : '洗衣店管理系统';\n\n  // 获取用户token\n  const hasToken = getToken();\n\n  // 判断是否有token\n  if (hasToken) {\n    if (to.path === '/login') {\n      // 如果已登录，重定向到首页\n      next({\n        path: '/'\n      });\n      NProgress.done();\n    } else {\n      // 确定用户是否已通过getUserInfo获取到权限角色\n      const hasRoles = store.getters.roles && store.getters.roles.length > 0;\n      if (hasRoles) {\n        next();\n      } else {\n        try {\n          // 获取用户信息\n          // 注意：roles必须是一个数组！ 如: ['admin'] 或 ['developer', 'editor']\n          const {\n            roles\n          } = await store.dispatch('user/getUserInfo');\n\n          // 基于角色生成可访问路由图\n          // const accessRoutes = await store.dispatch('permission/generateRoutes', roles);\n\n          // 动态添加可访问路由\n          // router.addRoutes(accessRoutes);\n\n          // hack方法 确保addRoutes已完成\n          next({\n            ...to,\n            replace: true\n          });\n        } catch (error) {\n          // 删除token并跳转到登录页面重新登录\n          await store.dispatch('user/resetToken');\n          Message.error(error || 'Has Error');\n          next(`/login?redirect=${to.path}`);\n          NProgress.done();\n        }\n      }\n    }\n  } else {\n    /* 没有token */\n    if (whiteList.indexOf(to.path) !== -1) {\n      // 在免登录白名单中，直接进入\n      next();\n    } else {\n      // 没有访问权限的其他页面将重定向到登录页面\n      next(`/login?redirect=${to.path}`);\n      NProgress.done();\n    }\n  }\n});\nrouter.afterEach(() => {\n  // 结束进度条\n  NProgress.done();\n});","map":{"version":3,"names":["router","store","Message","NProgress","getToken","configure","showSpinner","whiteList","beforeEach","to","from","next","start","document","title","meta","hasToken","path","done","hasRoles","getters","roles","length","dispatch","replace","error","indexOf","afterEach"],"sources":["/Users/tungwoo/IdeaProject/laundry/admin/src/permission.js"],"sourcesContent":["import router from './router';\nimport store from './store';\nimport { Message } from 'ant-design-vue';\nimport NProgress from 'nprogress'; // 进度条\nimport 'nprogress/nprogress.css'; // 进度条样式\nimport { getToken } from '@/utils/auth'; // 获取token\n\nNProgress.configure({ showSpinner: false }); // NProgress配置\n\nconst whiteList = ['/login']; // 不重定向白名单\n\n// 全局前置守卫\nrouter.beforeEach(async (to, from, next) => {\n  // 开始进度条\n  NProgress.start();\n\n  // 设置页面标题\n  document.title = to.meta.title ? to.meta.title + ' - 洗衣店管理系统' : '洗衣店管理系统';\n\n  // 获取用户token\n  const hasToken = getToken();\n\n  // 判断是否有token\n  if (hasToken) {\n    if (to.path === '/login') {\n      // 如果已登录，重定向到首页\n      next({ path: '/' });\n      NProgress.done();\n    } else {\n      // 确定用户是否已通过getUserInfo获取到权限角色\n      const hasRoles = store.getters.roles && store.getters.roles.length > 0;\n      \n      if (hasRoles) {\n        next();\n      } else {\n        try {\n          // 获取用户信息\n          // 注意：roles必须是一个数组！ 如: ['admin'] 或 ['developer', 'editor']\n          const { roles } = await store.dispatch('user/getUserInfo');\n\n          // 基于角色生成可访问路由图\n          // const accessRoutes = await store.dispatch('permission/generateRoutes', roles);\n\n          // 动态添加可访问路由\n          // router.addRoutes(accessRoutes);\n\n          // hack方法 确保addRoutes已完成\n          next({ ...to, replace: true });\n        } catch (error) {\n          // 删除token并跳转到登录页面重新登录\n          await store.dispatch('user/resetToken');\n          Message.error(error || 'Has Error');\n          next(`/login?redirect=${to.path}`);\n          NProgress.done();\n        }\n      }\n    }\n  } else {\n    /* 没有token */\n    if (whiteList.indexOf(to.path) !== -1) {\n      // 在免登录白名单中，直接进入\n      next();\n    } else {\n      // 没有访问权限的其他页面将重定向到登录页面\n      next(`/login?redirect=${to.path}`);\n      NProgress.done();\n    }\n  }\n});\n\nrouter.afterEach(() => {\n  // 结束进度条\n  NProgress.done();\n}); "],"mappings":"AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,OAAO,QAAQ,gBAAgB;AACxC,OAAOC,SAAS,MAAM,WAAW,CAAC,CAAC;AACnC,OAAO,yBAAyB,CAAC,CAAC;AAClC,SAASC,QAAQ,QAAQ,cAAc,CAAC,CAAC;;AAEzCD,SAAS,CAACE,SAAS,CAAC;EAAEC,WAAW,EAAE;AAAM,CAAC,CAAC,CAAC,CAAC;;AAE7C,MAAMC,SAAS,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAE9B;AACAP,MAAM,CAACQ,UAAU,CAAC,OAAOC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC1C;EACAR,SAAS,CAACS,KAAK,CAAC,CAAC;;EAEjB;EACAC,QAAQ,CAACC,KAAK,GAAGL,EAAE,CAACM,IAAI,CAACD,KAAK,GAAGL,EAAE,CAACM,IAAI,CAACD,KAAK,GAAG,YAAY,GAAG,SAAS;;EAEzE;EACA,MAAME,QAAQ,GAAGZ,QAAQ,CAAC,CAAC;;EAE3B;EACA,IAAIY,QAAQ,EAAE;IACZ,IAAIP,EAAE,CAACQ,IAAI,KAAK,QAAQ,EAAE;MACxB;MACAN,IAAI,CAAC;QAAEM,IAAI,EAAE;MAAI,CAAC,CAAC;MACnBd,SAAS,CAACe,IAAI,CAAC,CAAC;IAClB,CAAC,MAAM;MACL;MACA,MAAMC,QAAQ,GAAGlB,KAAK,CAACmB,OAAO,CAACC,KAAK,IAAIpB,KAAK,CAACmB,OAAO,CAACC,KAAK,CAACC,MAAM,GAAG,CAAC;MAEtE,IAAIH,QAAQ,EAAE;QACZR,IAAI,CAAC,CAAC;MACR,CAAC,MAAM;QACL,IAAI;UACF;UACA;UACA,MAAM;YAAEU;UAAM,CAAC,GAAG,MAAMpB,KAAK,CAACsB,QAAQ,CAAC,kBAAkB,CAAC;;UAE1D;UACA;;UAEA;UACA;;UAEA;UACAZ,IAAI,CAAC;YAAE,GAAGF,EAAE;YAAEe,OAAO,EAAE;UAAK,CAAC,CAAC;QAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACd;UACA,MAAMxB,KAAK,CAACsB,QAAQ,CAAC,iBAAiB,CAAC;UACvCrB,OAAO,CAACuB,KAAK,CAACA,KAAK,IAAI,WAAW,CAAC;UACnCd,IAAI,CAAC,mBAAmBF,EAAE,CAACQ,IAAI,EAAE,CAAC;UAClCd,SAAS,CAACe,IAAI,CAAC,CAAC;QAClB;MACF;IACF;EACF,CAAC,MAAM;IACL;IACA,IAAIX,SAAS,CAACmB,OAAO,CAACjB,EAAE,CAACQ,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MACrC;MACAN,IAAI,CAAC,CAAC;IACR,CAAC,MAAM;MACL;MACAA,IAAI,CAAC,mBAAmBF,EAAE,CAACQ,IAAI,EAAE,CAAC;MAClCd,SAAS,CAACe,IAAI,CAAC,CAAC;IAClB;EACF;AACF,CAAC,CAAC;AAEFlB,MAAM,CAAC2B,SAAS,CAAC,MAAM;EACrB;EACAxB,SAAS,CAACe,IAAI,CAAC,CAAC;AAClB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}